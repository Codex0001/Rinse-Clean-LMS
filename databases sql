CREATE TABLE IF NOT EXISTS customers (
    id INT NOT NULL AUTO_INCREMENT,          
    username VARCHAR(50) NOT NULL UNIQUE,    
    password VARCHAR(255) NOT NULL,          
    email VARCHAR(100) NOT NULL UNIQUE,      
    phone_number VARCHAR(15) NOT NULL UNIQUE, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS orders (
    id INT NOT NULL AUTO_INCREMENT,              
    order_id VARCHAR(20),                        
    customer_name VARCHAR(100) NOT NULL,         
    laundry_type VARCHAR(50) NOT NULL,          
    fabric_softener VARCHAR(100),                
    pickup_time DATETIME NOT NULL,               
    delivery_time DATETIME NOT NULL,             
    special_instructions TEXT,                   
    status VARCHAR(20) DEFAULT 'Pending',        
    PRIMARY KEY (id)
);

-- Trigger to generate custom order ID with prefix 'RCLMS'
DELIMITER //

CREATE TRIGGER before_insert_orders
BEFORE INSERT ON orders
FOR EACH ROW
BEGIN
    SET NEW.order_id = CONCAT('RCLMS', LPAD(NEW.id, 5, '0')); 
END //

DELIMITER ;

CREATE TABLE IF NOT EXISTS users (
    id INT NOT NULL AUTO_INCREMENT,          
    username VARCHAR(50) NOT NULL UNIQUE,    
    password VARCHAR(255) NOT NULL,          
    email VARCHAR(100) NOT NULL UNIQUE,      
    phone_number VARCHAR(15) NOT NULL UNIQUE, 
    role ENUM('admin', 'staff', 'customer') DEFAULT 'customer', 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    PRIMARY KEY (id)
);

CREATE TABLE staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,          -- Unique staff identifier
    reg_number VARCHAR(12) UNIQUE NOT NULL,           -- Registration number (e.g., RCLM-EMP0001)
    name VARCHAR(100) NOT NULL,                       -- Staff full name
    department VARCHAR(50) NOT NULL,                  -- Department or role
    phone_number VARCHAR(15) NOT NULL,                -- Staff contact information
    address VARCHAR(255),                             -- Staff address (optional)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   -- Timestamp when staff was added
    user_id INT,                                      -- Foreign key referencing the id in the users table
    FOREIGN KEY (user_id) REFERENCES users(id)        -- Correct foreign key reference
);

-- Insert test data into the customers table
INSERT INTO customers (username, password, email, phone_number) 
VALUES 
('jmwangi', 'password123', 'jmwangi@example.com', '0712345678'),
('akimani', 'password456', 'akimani@example.com', '0723456789'),
('wotieno', 'password789', 'wotieno@example.com', '0734567890');

-- Insert test data into the users table
INSERT INTO users (username, password, email, phone_number, role) 
VALUES 
('admin01', 'adminpass', 'admin01@example.com', '0700111222', 'admin'),
('staff01', 'staffpass', 'staff01@example.com', '0700222333', 'staff'),
('jmwangi', 'password123', 'jmwangi@example.com', '0712345678', 'customer'),
('akimani', 'password456', 'akimani@example.com', '0723456789', 'customer'),
('wotieno', 'password789', 'wotieno@example.com', '0734567890', 'customer');

-- Insert test data into the staff table
INSERT INTO staff (reg_number, name, department, phone_number, address, user_id)
VALUES
('RCLM-EMP0001', 'Paul Mutua', 'Laundry Technician', '0711222333', '123 Nairobi St.', 2), 
('RCLM-EMP0002', 'Mary Njeri', 'Customer Service', '0722333444', '456 Mombasa Rd.', 3);

-- Insert test data into the orders table
INSERT INTO orders (customer_name, laundry_type, fabric_softener, pickup_time, delivery_time, special_instructions, status)
VALUES
('James Mwangi', 'Dry Cleaning', 'Lavender', '2024-10-09 09:00:00', '2024-10-10 18:00:00', 'Handle with care', 'Pending'),
('Anne Kimani', 'Wash and Fold', 'Rose', '2024-10-10 10:30:00', '2024-10-11 17:00:00', 'No bleach', 'Scheduled'),
('Wycliffe Otieno', 'Wash and Iron', 'None', '2024-10-11 08:00:00', '2024-10-12 16:30:00', 'Use fabric softener', 'In Progress');